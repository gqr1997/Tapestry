// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tapestry_rpc.proto

package tapestry

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Ok struct {
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Reason               string   `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ok) Reset()         { *m = Ok{} }
func (m *Ok) String() string { return proto.CompactTextString(m) }
func (*Ok) ProtoMessage()    {}
func (*Ok) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e1e1dac4eaf6bae, []int{0}
}

func (m *Ok) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ok.Unmarshal(m, b)
}
func (m *Ok) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ok.Marshal(b, m, deterministic)
}
func (m *Ok) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ok.Merge(m, src)
}
func (m *Ok) XXX_Size() int {
	return xxx_messageInfo_Ok.Size(m)
}
func (m *Ok) XXX_DiscardUnknown() {
	xxx_messageInfo_Ok.DiscardUnknown(m)
}

var xxx_messageInfo_Ok proto.InternalMessageInfo

func (m *Ok) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *Ok) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type IdMsg struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Level                int32    `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IdMsg) Reset()         { *m = IdMsg{} }
func (m *IdMsg) String() string { return proto.CompactTextString(m) }
func (*IdMsg) ProtoMessage()    {}
func (*IdMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e1e1dac4eaf6bae, []int{1}
}

func (m *IdMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IdMsg.Unmarshal(m, b)
}
func (m *IdMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IdMsg.Marshal(b, m, deterministic)
}
func (m *IdMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdMsg.Merge(m, src)
}
func (m *IdMsg) XXX_Size() int {
	return xxx_messageInfo_IdMsg.Size(m)
}
func (m *IdMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_IdMsg.DiscardUnknown(m)
}

var xxx_messageInfo_IdMsg proto.InternalMessageInfo

func (m *IdMsg) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *IdMsg) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

type DataBlob struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Key                  string   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DataBlob) Reset()         { *m = DataBlob{} }
func (m *DataBlob) String() string { return proto.CompactTextString(m) }
func (*DataBlob) ProtoMessage()    {}
func (*DataBlob) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e1e1dac4eaf6bae, []int{2}
}

func (m *DataBlob) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataBlob.Unmarshal(m, b)
}
func (m *DataBlob) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataBlob.Marshal(b, m, deterministic)
}
func (m *DataBlob) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataBlob.Merge(m, src)
}
func (m *DataBlob) XXX_Size() int {
	return xxx_messageInfo_DataBlob.Size(m)
}
func (m *DataBlob) XXX_DiscardUnknown() {
	xxx_messageInfo_DataBlob.DiscardUnknown(m)
}

var xxx_messageInfo_DataBlob proto.InternalMessageInfo

func (m *DataBlob) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *DataBlob) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type Key struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Key) Reset()         { *m = Key{} }
func (m *Key) String() string { return proto.CompactTextString(m) }
func (*Key) ProtoMessage()    {}
func (*Key) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e1e1dac4eaf6bae, []int{3}
}

func (m *Key) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Key.Unmarshal(m, b)
}
func (m *Key) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Key.Marshal(b, m, deterministic)
}
func (m *Key) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Key.Merge(m, src)
}
func (m *Key) XXX_Size() int {
	return xxx_messageInfo_Key.Size(m)
}
func (m *Key) XXX_DiscardUnknown() {
	xxx_messageInfo_Key.DiscardUnknown(m)
}

var xxx_messageInfo_Key proto.InternalMessageInfo

func (m *Key) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type NodeMsg struct {
	Address              string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Id                   string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeMsg) Reset()         { *m = NodeMsg{} }
func (m *NodeMsg) String() string { return proto.CompactTextString(m) }
func (*NodeMsg) ProtoMessage()    {}
func (*NodeMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e1e1dac4eaf6bae, []int{4}
}

func (m *NodeMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeMsg.Unmarshal(m, b)
}
func (m *NodeMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeMsg.Marshal(b, m, deterministic)
}
func (m *NodeMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeMsg.Merge(m, src)
}
func (m *NodeMsg) XXX_Size() int {
	return xxx_messageInfo_NodeMsg.Size(m)
}
func (m *NodeMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeMsg.DiscardUnknown(m)
}

var xxx_messageInfo_NodeMsg proto.InternalMessageInfo

func (m *NodeMsg) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *NodeMsg) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type RootMsg struct {
	Next                 *NodeMsg   `protobuf:"bytes,1,opt,name=next,proto3" json:"next,omitempty"`
	ToRemove             []*NodeMsg `protobuf:"bytes,2,rep,name=toRemove,proto3" json:"toRemove,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *RootMsg) Reset()         { *m = RootMsg{} }
func (m *RootMsg) String() string { return proto.CompactTextString(m) }
func (*RootMsg) ProtoMessage()    {}
func (*RootMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e1e1dac4eaf6bae, []int{5}
}

func (m *RootMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RootMsg.Unmarshal(m, b)
}
func (m *RootMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RootMsg.Marshal(b, m, deterministic)
}
func (m *RootMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RootMsg.Merge(m, src)
}
func (m *RootMsg) XXX_Size() int {
	return xxx_messageInfo_RootMsg.Size(m)
}
func (m *RootMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_RootMsg.DiscardUnknown(m)
}

var xxx_messageInfo_RootMsg proto.InternalMessageInfo

func (m *RootMsg) GetNext() *NodeMsg {
	if m != nil {
		return m.Next
	}
	return nil
}

func (m *RootMsg) GetToRemove() []*NodeMsg {
	if m != nil {
		return m.ToRemove
	}
	return nil
}

type Registration struct {
	FromNode             *NodeMsg `protobuf:"bytes,1,opt,name=fromNode,proto3" json:"fromNode,omitempty"`
	Key                  string   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Registration) Reset()         { *m = Registration{} }
func (m *Registration) String() string { return proto.CompactTextString(m) }
func (*Registration) ProtoMessage()    {}
func (*Registration) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e1e1dac4eaf6bae, []int{6}
}

func (m *Registration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Registration.Unmarshal(m, b)
}
func (m *Registration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Registration.Marshal(b, m, deterministic)
}
func (m *Registration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Registration.Merge(m, src)
}
func (m *Registration) XXX_Size() int {
	return xxx_messageInfo_Registration.Size(m)
}
func (m *Registration) XXX_DiscardUnknown() {
	xxx_messageInfo_Registration.DiscardUnknown(m)
}

var xxx_messageInfo_Registration proto.InternalMessageInfo

func (m *Registration) GetFromNode() *NodeMsg {
	if m != nil {
		return m.FromNode
	}
	return nil
}

func (m *Registration) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type FetchedLocations struct {
	IsRoot               bool       `protobuf:"varint,1,opt,name=isRoot,proto3" json:"isRoot,omitempty"`
	Values               []*NodeMsg `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *FetchedLocations) Reset()         { *m = FetchedLocations{} }
func (m *FetchedLocations) String() string { return proto.CompactTextString(m) }
func (*FetchedLocations) ProtoMessage()    {}
func (*FetchedLocations) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e1e1dac4eaf6bae, []int{7}
}

func (m *FetchedLocations) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FetchedLocations.Unmarshal(m, b)
}
func (m *FetchedLocations) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FetchedLocations.Marshal(b, m, deterministic)
}
func (m *FetchedLocations) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchedLocations.Merge(m, src)
}
func (m *FetchedLocations) XXX_Size() int {
	return xxx_messageInfo_FetchedLocations.Size(m)
}
func (m *FetchedLocations) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchedLocations.DiscardUnknown(m)
}

var xxx_messageInfo_FetchedLocations proto.InternalMessageInfo

func (m *FetchedLocations) GetIsRoot() bool {
	if m != nil {
		return m.IsRoot
	}
	return false
}

func (m *FetchedLocations) GetValues() []*NodeMsg {
	if m != nil {
		return m.Values
	}
	return nil
}

type Neighbors struct {
	Neighbors            []*NodeMsg `protobuf:"bytes,1,rep,name=neighbors,proto3" json:"neighbors,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Neighbors) Reset()         { *m = Neighbors{} }
func (m *Neighbors) String() string { return proto.CompactTextString(m) }
func (*Neighbors) ProtoMessage()    {}
func (*Neighbors) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e1e1dac4eaf6bae, []int{8}
}

func (m *Neighbors) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Neighbors.Unmarshal(m, b)
}
func (m *Neighbors) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Neighbors.Marshal(b, m, deterministic)
}
func (m *Neighbors) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Neighbors.Merge(m, src)
}
func (m *Neighbors) XXX_Size() int {
	return xxx_messageInfo_Neighbors.Size(m)
}
func (m *Neighbors) XXX_DiscardUnknown() {
	xxx_messageInfo_Neighbors.DiscardUnknown(m)
}

var xxx_messageInfo_Neighbors proto.InternalMessageInfo

func (m *Neighbors) GetNeighbors() []*NodeMsg {
	if m != nil {
		return m.Neighbors
	}
	return nil
}

type MulticastRequest struct {
	NewNode              *NodeMsg `protobuf:"bytes,1,opt,name=newNode,proto3" json:"newNode,omitempty"`
	Level                int32    `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MulticastRequest) Reset()         { *m = MulticastRequest{} }
func (m *MulticastRequest) String() string { return proto.CompactTextString(m) }
func (*MulticastRequest) ProtoMessage()    {}
func (*MulticastRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e1e1dac4eaf6bae, []int{9}
}

func (m *MulticastRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MulticastRequest.Unmarshal(m, b)
}
func (m *MulticastRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MulticastRequest.Marshal(b, m, deterministic)
}
func (m *MulticastRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MulticastRequest.Merge(m, src)
}
func (m *MulticastRequest) XXX_Size() int {
	return xxx_messageInfo_MulticastRequest.Size(m)
}
func (m *MulticastRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MulticastRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MulticastRequest proto.InternalMessageInfo

func (m *MulticastRequest) GetNewNode() *NodeMsg {
	if m != nil {
		return m.NewNode
	}
	return nil
}

func (m *MulticastRequest) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

type TransferData struct {
	From                 *NodeMsg              `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	Data                 map[string]*Neighbors `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *TransferData) Reset()         { *m = TransferData{} }
func (m *TransferData) String() string { return proto.CompactTextString(m) }
func (*TransferData) ProtoMessage()    {}
func (*TransferData) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e1e1dac4eaf6bae, []int{10}
}

func (m *TransferData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransferData.Unmarshal(m, b)
}
func (m *TransferData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransferData.Marshal(b, m, deterministic)
}
func (m *TransferData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferData.Merge(m, src)
}
func (m *TransferData) XXX_Size() int {
	return xxx_messageInfo_TransferData.Size(m)
}
func (m *TransferData) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferData.DiscardUnknown(m)
}

var xxx_messageInfo_TransferData proto.InternalMessageInfo

func (m *TransferData) GetFrom() *NodeMsg {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *TransferData) GetData() map[string]*Neighbors {
	if m != nil {
		return m.Data
	}
	return nil
}

type BackpointerRequest struct {
	From                 *NodeMsg `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	Level                int32    `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BackpointerRequest) Reset()         { *m = BackpointerRequest{} }
func (m *BackpointerRequest) String() string { return proto.CompactTextString(m) }
func (*BackpointerRequest) ProtoMessage()    {}
func (*BackpointerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e1e1dac4eaf6bae, []int{11}
}

func (m *BackpointerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BackpointerRequest.Unmarshal(m, b)
}
func (m *BackpointerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BackpointerRequest.Marshal(b, m, deterministic)
}
func (m *BackpointerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackpointerRequest.Merge(m, src)
}
func (m *BackpointerRequest) XXX_Size() int {
	return xxx_messageInfo_BackpointerRequest.Size(m)
}
func (m *BackpointerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BackpointerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BackpointerRequest proto.InternalMessageInfo

func (m *BackpointerRequest) GetFrom() *NodeMsg {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *BackpointerRequest) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

type LeaveNotification struct {
	From                 *NodeMsg `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	Replacement          *NodeMsg `protobuf:"bytes,2,opt,name=replacement,proto3" json:"replacement,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LeaveNotification) Reset()         { *m = LeaveNotification{} }
func (m *LeaveNotification) String() string { return proto.CompactTextString(m) }
func (*LeaveNotification) ProtoMessage()    {}
func (*LeaveNotification) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e1e1dac4eaf6bae, []int{12}
}

func (m *LeaveNotification) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LeaveNotification.Unmarshal(m, b)
}
func (m *LeaveNotification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LeaveNotification.Marshal(b, m, deterministic)
}
func (m *LeaveNotification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeaveNotification.Merge(m, src)
}
func (m *LeaveNotification) XXX_Size() int {
	return xxx_messageInfo_LeaveNotification.Size(m)
}
func (m *LeaveNotification) XXX_DiscardUnknown() {
	xxx_messageInfo_LeaveNotification.DiscardUnknown(m)
}

var xxx_messageInfo_LeaveNotification proto.InternalMessageInfo

func (m *LeaveNotification) GetFrom() *NodeMsg {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *LeaveNotification) GetReplacement() *NodeMsg {
	if m != nil {
		return m.Replacement
	}
	return nil
}

func init() {
	proto.RegisterType((*Ok)(nil), "tapestry.Ok")
	proto.RegisterType((*IdMsg)(nil), "tapestry.IdMsg")
	proto.RegisterType((*DataBlob)(nil), "tapestry.DataBlob")
	proto.RegisterType((*Key)(nil), "tapestry.Key")
	proto.RegisterType((*NodeMsg)(nil), "tapestry.NodeMsg")
	proto.RegisterType((*RootMsg)(nil), "tapestry.RootMsg")
	proto.RegisterType((*Registration)(nil), "tapestry.Registration")
	proto.RegisterType((*FetchedLocations)(nil), "tapestry.FetchedLocations")
	proto.RegisterType((*Neighbors)(nil), "tapestry.Neighbors")
	proto.RegisterType((*MulticastRequest)(nil), "tapestry.MulticastRequest")
	proto.RegisterType((*TransferData)(nil), "tapestry.TransferData")
	proto.RegisterMapType((map[string]*Neighbors)(nil), "tapestry.TransferData.DataEntry")
	proto.RegisterType((*BackpointerRequest)(nil), "tapestry.BackpointerRequest")
	proto.RegisterType((*LeaveNotification)(nil), "tapestry.LeaveNotification")
}

func init() { proto.RegisterFile("tapestry_rpc.proto", fileDescriptor_9e1e1dac4eaf6bae) }

var fileDescriptor_9e1e1dac4eaf6bae = []byte{
	// 726 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0x5d, 0x4f, 0x13, 0x4d,
	0x14, 0x6e, 0xb7, 0x94, 0xb6, 0xa7, 0xa5, 0x2f, 0x0c, 0x7d, 0xa1, 0xa9, 0x5e, 0x34, 0x9b, 0x98,
	0x40, 0x94, 0x6a, 0x40, 0x0d, 0x5f, 0x17, 0x02, 0x8a, 0x1a, 0x0a, 0xe8, 0x8a, 0xd7, 0x64, 0xe8,
	0x1e, 0x60, 0xd3, 0x65, 0xa7, 0xce, 0x4e, 0xab, 0xfd, 0x57, 0xde, 0xfa, 0xef, 0xcc, 0xcc, 0xce,
	0x74, 0x37, 0xec, 0x2e, 0x21, 0xde, 0x34, 0x7b, 0x66, 0x9e, 0xe7, 0x7c, 0x3f, 0x1d, 0x20, 0x82,
	0x8e, 0x30, 0x14, 0x7c, 0x7a, 0xc9, 0x47, 0x83, 0xde, 0x88, 0x33, 0xc1, 0x48, 0xd5, 0x9c, 0xd9,
	0x2f, 0xc0, 0x3a, 0x1f, 0x92, 0x26, 0x58, 0x6c, 0xd8, 0x2e, 0x76, 0x8b, 0x6b, 0x55, 0xc7, 0x62,
	0x43, 0xb2, 0x02, 0xf3, 0x1c, 0x69, 0xc8, 0x82, 0xb6, 0xd5, 0x2d, 0xae, 0xd5, 0x1c, 0x6d, 0xd9,
	0x1b, 0x50, 0xfe, 0xec, 0x9e, 0x86, 0x37, 0x92, 0xe0, 0xb9, 0x8a, 0x50, 0x73, 0x2c, 0xcf, 0x25,
	0x2d, 0x28, 0xfb, 0x38, 0x41, 0x5f, 0xe1, 0xcb, 0x4e, 0x64, 0xd8, 0xaf, 0xa0, 0xfa, 0x9e, 0x0a,
	0x7a, 0xe8, 0xb3, 0x2b, 0x42, 0x60, 0xce, 0xa5, 0x82, 0x2a, 0x4e, 0xc3, 0x51, 0xdf, 0x64, 0x11,
	0x4a, 0x43, 0x9c, 0xea, 0x18, 0xf2, 0xd3, 0x5e, 0x85, 0xd2, 0x09, 0x4e, 0xcd, 0x45, 0x31, 0xbe,
	0xd8, 0x82, 0xca, 0x19, 0x73, 0x51, 0xc6, 0x6e, 0x43, 0x85, 0xba, 0x2e, 0xc7, 0x30, 0xd4, 0x00,
	0x63, 0xea, 0xac, 0x2c, 0x93, 0x95, 0x7d, 0x09, 0x15, 0x87, 0x31, 0x21, 0x49, 0xcf, 0x60, 0x2e,
	0xc0, 0x5f, 0x42, 0x31, 0xea, 0x9b, 0x4b, 0x3d, 0xd3, 0x80, 0x9e, 0xf6, 0xea, 0xa8, 0x6b, 0xb2,
	0x01, 0x55, 0xc1, 0x1c, 0xbc, 0x63, 0x13, 0x6c, 0x5b, 0xdd, 0x52, 0x36, 0x74, 0x06, 0xb1, 0xcf,
	0xa1, 0xe1, 0xe0, 0x8d, 0x17, 0x0a, 0x4e, 0x85, 0xc7, 0x02, 0x49, 0xbf, 0xe6, 0xec, 0x4e, 0x02,
	0xf3, 0x23, 0xcd, 0x20, 0x19, 0xf5, 0x7f, 0x87, 0xc5, 0x63, 0x14, 0x83, 0x5b, 0x74, 0xfb, 0x6c,
	0xa0, 0x7c, 0x86, 0x72, 0x18, 0x5e, 0x28, 0xeb, 0xd0, 0x03, 0xd2, 0x16, 0x59, 0x87, 0xf9, 0x09,
	0xf5, 0xc7, 0x18, 0xb6, 0x4b, 0x79, 0x99, 0x6a, 0x80, 0xbd, 0x0f, 0xb5, 0x33, 0xf4, 0x6e, 0x6e,
	0xaf, 0x18, 0x0f, 0xc9, 0x4b, 0xa8, 0x05, 0xc6, 0x68, 0x17, 0xf3, 0xa8, 0x31, 0x46, 0x26, 0x75,
	0x3a, 0xf6, 0x85, 0x37, 0xa0, 0xa1, 0x70, 0xf0, 0xc7, 0x18, 0x43, 0x41, 0x9e, 0x43, 0x25, 0xc0,
	0x9f, 0x0f, 0x17, 0x6a, 0x10, 0x39, 0xdb, 0xf1, 0xa7, 0x08, 0x8d, 0x0b, 0x4e, 0x83, 0xf0, 0x1a,
	0xb9, 0x5c, 0x13, 0x39, 0x23, 0xd9, 0x9a, 0x07, 0x66, 0x24, 0xaf, 0xc9, 0x6b, 0xbd, 0x49, 0xd1,
	0x7c, 0xba, 0x31, 0x2c, 0xe9, 0xac, 0x27, 0x7f, 0x3e, 0x04, 0x82, 0x4f, 0xa3, 0x5d, 0xeb, 0xf4,
	0xa1, 0x36, 0x3b, 0x4a, 0xef, 0x17, 0x59, 0x87, 0xb2, 0xea, 0x95, 0x4a, 0xb1, 0xbe, 0xb9, 0x9c,
	0x08, 0x6e, 0xfa, 0xe0, 0x44, 0x88, 0x5d, 0x6b, 0xbb, 0x68, 0x7f, 0x05, 0x72, 0x48, 0x07, 0xc3,
	0x11, 0xf3, 0x02, 0x81, 0xdc, 0x34, 0xe5, 0x91, 0x05, 0x64, 0xb7, 0x83, 0xc1, 0x52, 0x1f, 0xe9,
	0x04, 0xcf, 0x98, 0xf0, 0xae, 0xbd, 0x68, 0xf8, 0x8f, 0xf5, 0xb8, 0x05, 0x75, 0x8e, 0x23, 0x9f,
	0x0e, 0xf0, 0x0e, 0x03, 0xa1, 0x6b, 0xc8, 0x40, 0x27, 0x51, 0x9b, 0xbf, 0x2b, 0x50, 0xbf, 0xd0,
	0x08, 0xe7, 0xcb, 0x11, 0x79, 0x03, 0xf5, 0x4f, 0xe8, 0xfb, 0xec, 0x88, 0xfa, 0x3e, 0x72, 0x92,
	0xa6, 0x77, 0xd2, 0x47, 0x76, 0x81, 0xbc, 0x85, 0xe6, 0xb1, 0x17, 0xb8, 0x72, 0x25, 0x35, 0xf3,
	0xbf, 0x18, 0xa6, 0xfe, 0x2d, 0x92, 0x3c, 0xad, 0x47, 0xbb, 0x40, 0xb6, 0xa1, 0x19, 0x69, 0x07,
	0xb9, 0xe6, 0xad, 0x24, 0x60, 0x09, 0x55, 0x75, 0x1a, 0xf1, 0xf9, 0xf9, 0xd0, 0x2e, 0x90, 0x5d,
	0xa8, 0x2b, 0x91, 0x68, 0xda, 0x42, 0x7c, 0x7d, 0x82, 0xd3, 0x4e, 0x27, 0x36, 0xef, 0x4b, 0xc9,
	0x2e, 0x90, 0x1d, 0x58, 0x38, 0x70, 0x5d, 0x99, 0x7d, 0x7e, 0x99, 0x59, 0xc3, 0xb7, 0x0b, 0x64,
	0x0f, 0x5a, 0x91, 0xec, 0x0f, 0xa9, 0x72, 0x10, 0x6a, 0x0f, 0x59, 0xf0, 0x54, 0xce, 0x27, 0xb0,
	0xa2, 0xe3, 0xce, 0xa4, 0xa4, 0xe9, 0x89, 0x7c, 0xef, 0xab, 0x2c, 0x2f, 0x93, 0x6d, 0x68, 0x9a,
	0x5d, 0x4f, 0xb7, 0x2e, 0xa9, 0x82, 0x54, 0x1a, 0x3b, 0xd0, 0x3a, 0x70, 0xdd, 0xc4, 0xea, 0xe6,
	0x77, 0xe1, 0x3e, 0x75, 0x1f, 0x56, 0x4d, 0xf9, 0xff, 0xc0, 0xee, 0xc3, 0xff, 0x1f, 0x51, 0x24,
	0xa8, 0xa6, 0x7b, 0x4f, 0x63, 0x60, 0x5a, 0x51, 0x79, 0x0d, 0x78, 0x07, 0x4b, 0x4a, 0x26, 0x53,
	0xa5, 0x18, 0xed, 0xe9, 0x49, 0x8c, 0x4d, 0x09, 0x29, 0x95, 0xcf, 0x1e, 0xb4, 0xe4, 0xb3, 0xf4,
	0x4d, 0x30, 0x8e, 0x0f, 0x2c, 0x13, 0x89, 0x4d, 0xf3, 0x92, 0xa9, 0x2e, 0x2e, 0x1b, 0xe1, 0x28,
	0x07, 0x9a, 0x9b, 0x01, 0xce, 0xe8, 0x62, 0xcb, 0x50, 0xfb, 0x8c, 0x0d, 0xc7, 0xa3, 0xec, 0xb8,
	0xd9, 0x75, 0x5f, 0xcd, 0xab, 0xe7, 0x7b, 0xeb, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x15, 0x60,
	0xdc, 0x7e, 0xd4, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TapestryRPCClient is the client API for TapestryRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TapestryRPCClient interface {
	HelloCaller(ctx context.Context, in *NodeMsg, opts ...grpc.CallOption) (*NodeMsg, error)
	FindRootCaller(ctx context.Context, in *IdMsg, opts ...grpc.CallOption) (*RootMsg, error)
	RegisterCaller(ctx context.Context, in *Registration, opts ...grpc.CallOption) (*Ok, error)
	FetchCaller(ctx context.Context, in *Key, opts ...grpc.CallOption) (*FetchedLocations, error)
	AddNodeCaller(ctx context.Context, in *NodeMsg, opts ...grpc.CallOption) (*Neighbors, error)
	RemoveBadNodesCaller(ctx context.Context, in *Neighbors, opts ...grpc.CallOption) (*Ok, error)
	AddNodeMulticastCaller(ctx context.Context, in *MulticastRequest, opts ...grpc.CallOption) (*Neighbors, error)
	TransferCaller(ctx context.Context, in *TransferData, opts ...grpc.CallOption) (*Ok, error)
	AddBackpointerCaller(ctx context.Context, in *NodeMsg, opts ...grpc.CallOption) (*Ok, error)
	RemoveBackpointerCaller(ctx context.Context, in *NodeMsg, opts ...grpc.CallOption) (*Ok, error)
	GetBackpointersCaller(ctx context.Context, in *BackpointerRequest, opts ...grpc.CallOption) (*Neighbors, error)
	NotifyLeaveCaller(ctx context.Context, in *LeaveNotification, opts ...grpc.CallOption) (*Ok, error)
	BlobStoreFetchCaller(ctx context.Context, in *Key, opts ...grpc.CallOption) (*DataBlob, error)
	TapestryStoreCaller(ctx context.Context, in *DataBlob, opts ...grpc.CallOption) (*Ok, error)
	TapestryLookupCaller(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Neighbors, error)
}

type tapestryRPCClient struct {
	cc *grpc.ClientConn
}

func NewTapestryRPCClient(cc *grpc.ClientConn) TapestryRPCClient {
	return &tapestryRPCClient{cc}
}

func (c *tapestryRPCClient) HelloCaller(ctx context.Context, in *NodeMsg, opts ...grpc.CallOption) (*NodeMsg, error) {
	out := new(NodeMsg)
	err := c.cc.Invoke(ctx, "/tapestry.TapestryRPC/HelloCaller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tapestryRPCClient) FindRootCaller(ctx context.Context, in *IdMsg, opts ...grpc.CallOption) (*RootMsg, error) {
	out := new(RootMsg)
	err := c.cc.Invoke(ctx, "/tapestry.TapestryRPC/FindRootCaller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tapestryRPCClient) RegisterCaller(ctx context.Context, in *Registration, opts ...grpc.CallOption) (*Ok, error) {
	out := new(Ok)
	err := c.cc.Invoke(ctx, "/tapestry.TapestryRPC/RegisterCaller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tapestryRPCClient) FetchCaller(ctx context.Context, in *Key, opts ...grpc.CallOption) (*FetchedLocations, error) {
	out := new(FetchedLocations)
	err := c.cc.Invoke(ctx, "/tapestry.TapestryRPC/FetchCaller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tapestryRPCClient) AddNodeCaller(ctx context.Context, in *NodeMsg, opts ...grpc.CallOption) (*Neighbors, error) {
	out := new(Neighbors)
	err := c.cc.Invoke(ctx, "/tapestry.TapestryRPC/AddNodeCaller", in, out, opts...)
	if err != nil {
		fmt.Println("pb 1")
		return nil, err
	}
	return out, nil
}

func (c *tapestryRPCClient) RemoveBadNodesCaller(ctx context.Context, in *Neighbors, opts ...grpc.CallOption) (*Ok, error) {
	out := new(Ok)
	err := c.cc.Invoke(ctx, "/tapestry.TapestryRPC/RemoveBadNodesCaller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tapestryRPCClient) AddNodeMulticastCaller(ctx context.Context, in *MulticastRequest, opts ...grpc.CallOption) (*Neighbors, error) {
	out := new(Neighbors)
	err := c.cc.Invoke(ctx, "/tapestry.TapestryRPC/AddNodeMulticastCaller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tapestryRPCClient) TransferCaller(ctx context.Context, in *TransferData, opts ...grpc.CallOption) (*Ok, error) {
	out := new(Ok)
	err := c.cc.Invoke(ctx, "/tapestry.TapestryRPC/TransferCaller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tapestryRPCClient) AddBackpointerCaller(ctx context.Context, in *NodeMsg, opts ...grpc.CallOption) (*Ok, error) {
	out := new(Ok)
	err := c.cc.Invoke(ctx, "/tapestry.TapestryRPC/AddBackpointerCaller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tapestryRPCClient) RemoveBackpointerCaller(ctx context.Context, in *NodeMsg, opts ...grpc.CallOption) (*Ok, error) {
	out := new(Ok)
	err := c.cc.Invoke(ctx, "/tapestry.TapestryRPC/RemoveBackpointerCaller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tapestryRPCClient) GetBackpointersCaller(ctx context.Context, in *BackpointerRequest, opts ...grpc.CallOption) (*Neighbors, error) {
	out := new(Neighbors)
	err := c.cc.Invoke(ctx, "/tapestry.TapestryRPC/GetBackpointersCaller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tapestryRPCClient) NotifyLeaveCaller(ctx context.Context, in *LeaveNotification, opts ...grpc.CallOption) (*Ok, error) {
	out := new(Ok)
	err := c.cc.Invoke(ctx, "/tapestry.TapestryRPC/NotifyLeaveCaller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tapestryRPCClient) BlobStoreFetchCaller(ctx context.Context, in *Key, opts ...grpc.CallOption) (*DataBlob, error) {
	out := new(DataBlob)
	err := c.cc.Invoke(ctx, "/tapestry.TapestryRPC/BlobStoreFetchCaller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tapestryRPCClient) TapestryStoreCaller(ctx context.Context, in *DataBlob, opts ...grpc.CallOption) (*Ok, error) {
	out := new(Ok)
	err := c.cc.Invoke(ctx, "/tapestry.TapestryRPC/TapestryStoreCaller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tapestryRPCClient) TapestryLookupCaller(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Neighbors, error) {
	out := new(Neighbors)
	err := c.cc.Invoke(ctx, "/tapestry.TapestryRPC/TapestryLookupCaller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TapestryRPCServer is the server API for TapestryRPC service.
type TapestryRPCServer interface {
	HelloCaller(context.Context, *NodeMsg) (*NodeMsg, error)
	FindRootCaller(context.Context, *IdMsg) (*RootMsg, error)
	RegisterCaller(context.Context, *Registration) (*Ok, error)
	FetchCaller(context.Context, *Key) (*FetchedLocations, error)
	AddNodeCaller(context.Context, *NodeMsg) (*Neighbors, error)
	RemoveBadNodesCaller(context.Context, *Neighbors) (*Ok, error)
	AddNodeMulticastCaller(context.Context, *MulticastRequest) (*Neighbors, error)
	TransferCaller(context.Context, *TransferData) (*Ok, error)
	AddBackpointerCaller(context.Context, *NodeMsg) (*Ok, error)
	RemoveBackpointerCaller(context.Context, *NodeMsg) (*Ok, error)
	GetBackpointersCaller(context.Context, *BackpointerRequest) (*Neighbors, error)
	NotifyLeaveCaller(context.Context, *LeaveNotification) (*Ok, error)
	BlobStoreFetchCaller(context.Context, *Key) (*DataBlob, error)
	TapestryStoreCaller(context.Context, *DataBlob) (*Ok, error)
	TapestryLookupCaller(context.Context, *Key) (*Neighbors, error)
}

// UnimplementedTapestryRPCServer can be embedded to have forward compatible implementations.
type UnimplementedTapestryRPCServer struct {
}

func (*UnimplementedTapestryRPCServer) HelloCaller(ctx context.Context, req *NodeMsg) (*NodeMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelloCaller not implemented")
}
func (*UnimplementedTapestryRPCServer) FindRootCaller(ctx context.Context, req *IdMsg) (*RootMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindRootCaller not implemented")
}
func (*UnimplementedTapestryRPCServer) RegisterCaller(ctx context.Context, req *Registration) (*Ok, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterCaller not implemented")
}
func (*UnimplementedTapestryRPCServer) FetchCaller(ctx context.Context, req *Key) (*FetchedLocations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchCaller not implemented")
}
func (*UnimplementedTapestryRPCServer) AddNodeCaller(ctx context.Context, req *NodeMsg) (*Neighbors, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNodeCaller not implemented")
}
func (*UnimplementedTapestryRPCServer) RemoveBadNodesCaller(ctx context.Context, req *Neighbors) (*Ok, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBadNodesCaller not implemented")
}
func (*UnimplementedTapestryRPCServer) AddNodeMulticastCaller(ctx context.Context, req *MulticastRequest) (*Neighbors, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNodeMulticastCaller not implemented")
}
func (*UnimplementedTapestryRPCServer) TransferCaller(ctx context.Context, req *TransferData) (*Ok, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferCaller not implemented")
}
func (*UnimplementedTapestryRPCServer) AddBackpointerCaller(ctx context.Context, req *NodeMsg) (*Ok, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBackpointerCaller not implemented")
}
func (*UnimplementedTapestryRPCServer) RemoveBackpointerCaller(ctx context.Context, req *NodeMsg) (*Ok, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBackpointerCaller not implemented")
}
func (*UnimplementedTapestryRPCServer) GetBackpointersCaller(ctx context.Context, req *BackpointerRequest) (*Neighbors, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBackpointersCaller not implemented")
}
func (*UnimplementedTapestryRPCServer) NotifyLeaveCaller(ctx context.Context, req *LeaveNotification) (*Ok, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyLeaveCaller not implemented")
}
func (*UnimplementedTapestryRPCServer) BlobStoreFetchCaller(ctx context.Context, req *Key) (*DataBlob, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlobStoreFetchCaller not implemented")
}
func (*UnimplementedTapestryRPCServer) TapestryStoreCaller(ctx context.Context, req *DataBlob) (*Ok, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TapestryStoreCaller not implemented")
}
func (*UnimplementedTapestryRPCServer) TapestryLookupCaller(ctx context.Context, req *Key) (*Neighbors, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TapestryLookupCaller not implemented")
}

func RegisterTapestryRPCServer(s *grpc.Server, srv TapestryRPCServer) {
	s.RegisterService(&_TapestryRPC_serviceDesc, srv)
}

func _TapestryRPC_HelloCaller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapestryRPCServer).HelloCaller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tapestry.TapestryRPC/HelloCaller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapestryRPCServer).HelloCaller(ctx, req.(*NodeMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TapestryRPC_FindRootCaller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapestryRPCServer).FindRootCaller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tapestry.TapestryRPC/FindRootCaller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapestryRPCServer).FindRootCaller(ctx, req.(*IdMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TapestryRPC_RegisterCaller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Registration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapestryRPCServer).RegisterCaller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tapestry.TapestryRPC/RegisterCaller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapestryRPCServer).RegisterCaller(ctx, req.(*Registration))
	}
	return interceptor(ctx, in, info, handler)
}

func _TapestryRPC_FetchCaller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapestryRPCServer).FetchCaller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tapestry.TapestryRPC/FetchCaller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapestryRPCServer).FetchCaller(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _TapestryRPC_AddNodeCaller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapestryRPCServer).AddNodeCaller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tapestry.TapestryRPC/AddNodeCaller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapestryRPCServer).AddNodeCaller(ctx, req.(*NodeMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TapestryRPC_RemoveBadNodesCaller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Neighbors)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapestryRPCServer).RemoveBadNodesCaller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tapestry.TapestryRPC/RemoveBadNodesCaller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapestryRPCServer).RemoveBadNodesCaller(ctx, req.(*Neighbors))
	}
	return interceptor(ctx, in, info, handler)
}

func _TapestryRPC_AddNodeMulticastCaller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MulticastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapestryRPCServer).AddNodeMulticastCaller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tapestry.TapestryRPC/AddNodeMulticastCaller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapestryRPCServer).AddNodeMulticastCaller(ctx, req.(*MulticastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TapestryRPC_TransferCaller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapestryRPCServer).TransferCaller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tapestry.TapestryRPC/TransferCaller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapestryRPCServer).TransferCaller(ctx, req.(*TransferData))
	}
	return interceptor(ctx, in, info, handler)
}

func _TapestryRPC_AddBackpointerCaller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapestryRPCServer).AddBackpointerCaller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tapestry.TapestryRPC/AddBackpointerCaller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapestryRPCServer).AddBackpointerCaller(ctx, req.(*NodeMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TapestryRPC_RemoveBackpointerCaller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapestryRPCServer).RemoveBackpointerCaller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tapestry.TapestryRPC/RemoveBackpointerCaller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapestryRPCServer).RemoveBackpointerCaller(ctx, req.(*NodeMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TapestryRPC_GetBackpointersCaller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackpointerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapestryRPCServer).GetBackpointersCaller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tapestry.TapestryRPC/GetBackpointersCaller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapestryRPCServer).GetBackpointersCaller(ctx, req.(*BackpointerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TapestryRPC_NotifyLeaveCaller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapestryRPCServer).NotifyLeaveCaller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tapestry.TapestryRPC/NotifyLeaveCaller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapestryRPCServer).NotifyLeaveCaller(ctx, req.(*LeaveNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _TapestryRPC_BlobStoreFetchCaller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapestryRPCServer).BlobStoreFetchCaller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tapestry.TapestryRPC/BlobStoreFetchCaller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapestryRPCServer).BlobStoreFetchCaller(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _TapestryRPC_TapestryStoreCaller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataBlob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapestryRPCServer).TapestryStoreCaller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tapestry.TapestryRPC/TapestryStoreCaller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapestryRPCServer).TapestryStoreCaller(ctx, req.(*DataBlob))
	}
	return interceptor(ctx, in, info, handler)
}

func _TapestryRPC_TapestryLookupCaller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapestryRPCServer).TapestryLookupCaller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tapestry.TapestryRPC/TapestryLookupCaller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapestryRPCServer).TapestryLookupCaller(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

var _TapestryRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tapestry.TapestryRPC",
	HandlerType: (*TapestryRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HelloCaller",
			Handler:    _TapestryRPC_HelloCaller_Handler,
		},
		{
			MethodName: "FindRootCaller",
			Handler:    _TapestryRPC_FindRootCaller_Handler,
		},
		{
			MethodName: "RegisterCaller",
			Handler:    _TapestryRPC_RegisterCaller_Handler,
		},
		{
			MethodName: "FetchCaller",
			Handler:    _TapestryRPC_FetchCaller_Handler,
		},
		{
			MethodName: "AddNodeCaller",
			Handler:    _TapestryRPC_AddNodeCaller_Handler,
		},
		{
			MethodName: "RemoveBadNodesCaller",
			Handler:    _TapestryRPC_RemoveBadNodesCaller_Handler,
		},
		{
			MethodName: "AddNodeMulticastCaller",
			Handler:    _TapestryRPC_AddNodeMulticastCaller_Handler,
		},
		{
			MethodName: "TransferCaller",
			Handler:    _TapestryRPC_TransferCaller_Handler,
		},
		{
			MethodName: "AddBackpointerCaller",
			Handler:    _TapestryRPC_AddBackpointerCaller_Handler,
		},
		{
			MethodName: "RemoveBackpointerCaller",
			Handler:    _TapestryRPC_RemoveBackpointerCaller_Handler,
		},
		{
			MethodName: "GetBackpointersCaller",
			Handler:    _TapestryRPC_GetBackpointersCaller_Handler,
		},
		{
			MethodName: "NotifyLeaveCaller",
			Handler:    _TapestryRPC_NotifyLeaveCaller_Handler,
		},
		{
			MethodName: "BlobStoreFetchCaller",
			Handler:    _TapestryRPC_BlobStoreFetchCaller_Handler,
		},
		{
			MethodName: "TapestryStoreCaller",
			Handler:    _TapestryRPC_TapestryStoreCaller_Handler,
		},
		{
			MethodName: "TapestryLookupCaller",
			Handler:    _TapestryRPC_TapestryLookupCaller_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tapestry_rpc.proto",
}
